!function(e){var t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(a,r,function(t){return e[t]}.bind(null,r));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=n(1),r=n(2),o=process.argv;if(console.log(__dirname),o.length<3)console.log(a.Help.displayHelp());else switch(o[2]){case"new":"app"===o[3]?r.Application.createNewApplication(o[4]):"component"===o[3]&&r.Application.createNewComponent(o[4],o[5]);break;default:console.log(a.Help.displayHelp())}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Help=void 0;t.Help=class{constructor(){}static displayHelp(){return"\n            usage commands:\n            \n            -new            --- Create New Item\n                -app        --- create New litElement-based Application\n                -component  --- Create New litElement Component\n        "}}},function(e,t,n){"use strict";var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n),Object.defineProperty(e,a,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Application=void 0;const l=o(n(3)),c=o(n(4)),i=s(n(5)),p=s(n(6)),u=s(n(7));t.Application=class{constructor(e){this._name=e}static createNewApplication(e){console.log(__dirname);const t=l.resolve("./",""+e,"src/");console.log(t),c.mkdirSync(t,{recursive:!0}),console.log(`Creating App Folder on Path ${__dirname}/${e}`),console.log(`Creating Folder ${__dirname}/${e}/src`),console.log(`Creating Folder ${__dirname}/${e}/src/my-element`),this.createNewComponent("my-element",t)}static createNewComponent(e,t){let n=u.default.trimComponentName(e);console.log(n);const a=n.toLowerCase()+"-element";t=t||process.cwd();const r=l.resolve(t,a);console.log("Created New Folder "+r),console.log(t),console.log(process.cwd()),c.mkdirSync(r,{recursive:!0}),console.log(`Created New Element ${r}/${a}.ts`),c.writeFileSync(`${r}/${a}.ts`,this.generateNewComponent(n)),console.log(`Created New Test ${r}/${a}.ts`),c.writeFileSync(`${r}/${a}.test.ts`,this.generateNewTestCase(n))}static generateNewComponent(e){let t=(new i.default).renderTypescriptTemplate();t=t.replace(/^(?:    ){3}/gm,""),t=t.replace(/\n/,"");const n=u.default.firstToUpperCase(e),a=u.default.firstToLowerCase(e),r=u.default.convertToKebapCase(e);let o=t.replace(/%%PascalCase%%/g,n);return o=o.replace(/%%camelCase%%/g,a),o=o.replace(/\\/g,""),o.replace(/%%kebap-case%%/g,r)}static generateNewTestCase(e){const t=u.default.firstToUpperCase(e),n=u.default.firstToLowerCase(e),a=u.default.convertToKebapCase(e);let r=(new p.default).renderTestCaseTemplate();return r=r.replace(/^(?:    ){3}/gm,""),r=r.replace(/\n/,""),r=r.replace(/%%PascalCase%%/g,t),r=r.replace(/%%camelCase%%/g,n),r.replace(/%%kebap-case%%/g,a)}static generateNewTestCaseFromTemplate(e,t){let n=`${e[0].toUpperCase()}${e.substring(1,e.length)}`;return c.readFileSync(l.join(__dirname,t),{encoding:"utf-8"}).replace(/%%PascalCase%%/g,n).replace(/%%kebap-case%%/g,e.toLowerCase())}static generateNewComponentFromTemplate(e,t){let n=e[0].toUpperCase()+e.substring(1,e.length);return c.readFileSync(l.join(__dirname,t),{encoding:"utf-8"}).replace(/%%PascalCase%%/g,n).replace(/%%kebap-case%%/g,e.toLowerCase())}}},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("fs")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){}renderTypescriptTemplate(){return"\n            import { LitElement, html, css, property, customElement } from 'lit-element';\n\n            @customElement('%%kebap-case%%-element')\n            export class %%PascalCase%%Element extends LitElement {\n                private _name: string;\n\n                @property({ type: String }) public get name() {\n                    return this._name;\n                } \n                public set name(value: string) {\n                    const oldValue = this.name;\n                    this._name = value;\n                    this.requestUpdate('name', oldValue)\n                }\n                \n                constructor() {\n                    super();\n                    this.name = \"%%PascalCase%%Element\";\n                }\n\n                render() {\n                    return html`\n                        <h1>${this.name} <span class=\".blink\">Works!</span></h1>\n                    `;\n                }\n                \n                static get styles() {\n                    const style = css`\n                        :host {\n                            color: red;\n                            // create a blink css property\n                        }\n                        @keyframes blink {\n                            from { color: red; }\n                            to { color: white; }\n                        }\n                        .blink {\n                            animation-name: blink;\n                            animation-duration: 2s;\n                        }\n                    `;\n                    return [style];\n                }\n            }\n        "}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{renderTestCaseTemplate(){return"\n            import  { %%PascalCase%%Element } from \"./%%kebap-case%%-element\";\n            import * as assert from 'assert';\n\n            let %%camelCase%%: %%PascalCase%%Element;\n            let shadow: shadowRoot;\n\n            describe(\"Test Case for the %%PascalCase%%Element Class\", () => {\n                beforeEach(() => {\n                    %%camelCase%% = new %%PascalCase%%Element();\n                    document.body.appendChild(%%camelCase%%);\n                    shadow = %%camelCase%%.shadowRoot;\n                });\n\n                afterEach(() => {\n                    document.body.removeChild(%%camelCase%%);\n                    %%camelCase%% = null;\n                });\n\n                it(\"%%camelCase%% has a property 'name' with value of '%%PascalCase%%'\", function() {\n                    assert.equal(%%camelCase%%.name, '%%PascalCase%%');\n                });\n\n                it(\"%%camelCase%% has a 'color' red applied to its children\", function() {\n                    const host = window.getComputedStyle(%%camelCase%%, ':host');\n                    const color = host.getPropertyValue('color');\n                    assert.equal(%%camelCase%%, color);\n                });\n            })\n        "}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){}static firstToUpperCase(e){return e[0].toUpperCase()+e.substring(1,e.length)}static firstToLowerCase(e){return e[0].toLowerCase()+e.substring(1,e.length)}static convertToKebapCase(e){const t=e.replace(/[A-Za-z][a-z]+/g,e=>"-"+e.toLowerCase());return t.slice(1,t.length)}static convertToSnakeCase(e){const t=e.replace(/[A-Za-z][a-z]+/g,e=>"_"+e.toLowerCase());return t.slice(1,t.length)}static trimComponentName(e){let t=new RegExp("Component|Element|-element|-component|-","g");return e.replace(t,"")}}}]);