#!/usr/bin/env node
!function(e){var n={};function t(o){if(n[o])return n[o].exports;var a=n[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,t),a.l=!0,a.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)t.d(o,a,function(n){return e[n]}.bind(null,a));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const o=t(1),a=t(2),r=process.argv;if(console.log(__dirname),r.length<3)console.log(o.Help.displayHelp());else switch(r[2]){case"new":"app"===r[3]?a.Application.createNewApplication(r[4]):"component"===r[3]&&a.Application.createNewComponent(r[4],r[5]);break;default:console.log(o.Help.displayHelp())}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Help=void 0;n.Help=class{constructor(){}static displayHelp(){return"\n            usage commands:\n            \n            -new            --- Create New Item\n                -app        --- create New litElement-based Application\n                -component  --- Create New litElement Component\n        "}}},function(e,n,t){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,n,t,o){void 0===o&&(o=t),Object.defineProperty(e,o,{enumerable:!0,get:function(){return n[t]}})}:function(e,n,t,o){void 0===o&&(o=t),e[o]=n[t]}),a=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.hasOwnProperty.call(e,t)&&o(n,e,t);return a(n,e),n},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.Application=void 0;const l=r(t(3)),c=r(t(4)),i=s(t(5)),u=s(t(6)),p=s(t(7)),m=s(t(8)),d=s(t(9));n.Application=class{constructor(e){this._name=e}static createNewApplication(e){console.log(__dirname);const n=l.resolve("./",""+e,"src/");console.log(n),c.mkdirSync(n,{recursive:!0}),console.log(`Creating App Folder on Path ${__dirname}/${e}`),console.log(`Creating Folder ${__dirname}/${e}/src`),console.log(`Creating Folder ${__dirname}/${e}/src/my-element`),this.createNewComponent("my-element",n),console.log(`Creating Folder ${__dirname}/${e}/test`);const t=l.resolve("./",""+e,"test/");this.createConfigurationFiles(t)}static fetchTemplateProjectFromRepo(){d.default.get("https://github.com/FreeBLD/lit-element-template.git",e=>{console.log(e);e.on("data",e=>(console.log(e),e))})}static createConfigurationFiles(e){c.mkdirSync(e,{recursive:!0});const n=new m.default;let t=n.getDefaultWebpackTemplate();c.writeFileSync(e+"/webpack.config.js",t);let o=n.getDefaultWebpackTemplate();c.writeFileSync(e+"/tsconfig.json",o)}static createNewComponent(e,n){let t=p.default.trimComponentName(e);const o=t.toLowerCase()+"-element";n=n||process.cwd();const a=l.resolve(n,o);console.log("Created New Folder "+a),c.mkdirSync(a,{recursive:!0}),console.log(`Created New Element ${a}/${o}.ts`),c.writeFileSync(`${a}/${o}.ts`,this.generateNewComponent(t)),console.log(`Created New Test ${a}/${o}.ts`),c.writeFileSync(`${a}/${o}.test.ts`,this.generateNewTestCase(t))}static generateNewComponent(e){let n=(new i.default).renderTypescriptTemplate();n=n.replace(/^(?:    ){3}/gm,""),n=n.replace(/\n/,"");const t=p.default.firstToUpperCase(e),o=p.default.firstToLowerCase(e),a=p.default.convertToKebapCase(e);let r=n.replace(/%%PascalCase%%/g,t);return r=r.replace(/%%camelCase%%/g,o),r=r.replace(/\\/g,""),r.replace(/%%kebap-case%%/g,a)}static generateNewTestCase(e){const n=p.default.firstToUpperCase(e),t=p.default.firstToLowerCase(e),o=p.default.convertToKebapCase(e);let a=(new u.default).renderTestCaseTemplate();return a=a.replace(/^(?:    ){3}/gm,""),a=a.replace(/\n/,""),a=a.replace(/%%PascalCase%%/g,n),a=a.replace(/%%camelCase%%/g,t),a.replace(/%%kebap-case%%/g,o)}static generateNewTestCaseFromTemplate(e,n){let t=p.default.firstToUpperCase(e);return c.readFileSync(l.join(__dirname,n),{encoding:"utf-8"}).replace(/%%PascalCase%%/g,t).replace(/%%kebap-case%%/g,e.toLowerCase())}static generateNewComponentFromTemplate(e,n){let t=p.default.firstToUpperCase(e);return c.readFileSync(l.join(__dirname,n),{encoding:"utf-8"}).replace(/%%PascalCase%%/g,t).replace(/%%kebap-case%%/g,e.toLowerCase())}}},function(e,n){e.exports=require("path")},function(e,n){e.exports=require("fs")},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(){}renderTypescriptTemplate(){return"\n            import { LitElement, html, css, property, customElement } from 'lit-element';\n\n            @customElement('%%kebap-case%%-element')\n            export class %%PascalCase%%Element extends LitElement {\n                private _name: string;\n\n                @property({ type: String }) public get name() {\n                    return this._name;\n                } \n                public set name(value: string) {\n                    const oldValue = this.name;\n                    this._name = value;\n                    this.requestUpdate('name', oldValue)\n                }\n                \n                constructor() {\n                    super();\n                    this.name = \"%%PascalCase%%Element\";\n                }\n\n                render() {\n                    return html`\n                        <h1>${this.name} <span class=\".blink\">Works!</span></h1>\n                    `;\n                }\n                \n                static get styles() {\n                    const style = css`\n                        :host {\n                            color: red;\n                            // create a blink css property\n                        }\n                        @keyframes blink {\n                            from { color: red; }\n                            to { color: white; }\n                        }\n                        .blink {\n                            animation-name: blink;\n                            animation-duration: 2s;\n                        }\n                    `;\n                    return [style];\n                }\n            }\n        "}}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default=class{renderTestCaseTemplate(){return"\n            import  { %%PascalCase%%Element } from \"./%%kebap-case%%-element\";\n            import * as assert from 'assert';\n\n            let %%camelCase%%: %%PascalCase%%Element;\n            let shadow: shadowRoot;\n\n            describe(\"Test Case for the %%PascalCase%%Element Class\", () => {\n                beforeEach(() => {\n                    %%camelCase%% = new %%PascalCase%%Element();\n                    document.body.appendChild(%%camelCase%%);\n                    shadow = %%camelCase%%.shadowRoot;\n                });\n\n                afterEach(() => {\n                    document.body.removeChild(%%camelCase%%);\n                    %%camelCase%% = null;\n                });\n\n                it(\"%%camelCase%% has a property 'name' with value of '%%PascalCase%%'\", function() {\n                    assert.equal(%%camelCase%%.name, '%%PascalCase%%');\n                });\n\n                it(\"%%camelCase%% has a 'color' red applied to its children\", function() {\n                    const host = window.getComputedStyle(%%camelCase%%, ':host');\n                    const color = host.getPropertyValue('color');\n                    assert.equal(%%camelCase%%, color);\n                });\n            })\n        "}}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(){}static firstToUpperCase(e){return e[0].toUpperCase()+e.substring(1,e.length)}static firstToLowerCase(e){return e[0].toLowerCase()+e.substring(1,e.length)}static convertToKebapCase(e){const n=e.replace(/[A-Za-z][a-z]+/g,e=>"-"+e.toLowerCase());return n.slice(1,n.length)}static convertToSnakeCase(e){const n=e.replace(/[A-Za-z][a-z]+/g,e=>"_"+e.toLowerCase());return n.slice(1,n.length)}static trimComponentName(e){let n=new RegExp("Component|Element|-element|-component|-","g");return e.replace(n,"")}}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(){}getDefaultTsConfigTemplate(){return'\n            {\n                "compilerOptions": {\n                    "outDir": "./dist/",\n                    "sourceMap": true,\n                    "noImplicitAny": true,\n                    "module": "CommonJS",\n                    "target": "ES2015",\n                    "allowJs": true,\n                    "experimentalDecorators": true,\n                    "moduleResolution": "Node"\n                }\n            }\n        '}getDefaultWebpackTemplate(){return"\n            const HtmlWebpackPlugin = require('html-webpack-plugin');\n            const CopyWebpackPlugin = require('copy-webpack-plugin');\n            const { CleanWebpackPlugin } = require('clean-webpack-plugin');\n            const path = require('path');\n            \n            module.exports = ({ mode }) => {\n                return {\n                    mode,\n                    entry: path.join(__dirname, 'src', 'index.ts'),\n                    output:  {\n                        path: path.join(__dirname, \"/dist\"),\n                        filename: \"bundle.js\"\n                    }, \n                    plugins: [\n                        new CleanWebpackPlugin(),\n                        new HtmlWebpackPlugin({\n                            entry: 'index.ts',\n                            template: path.resolve(__dirname, 'src/', 'index.html')\n                        }),\n                        new CopyWebpackPlugin({\n                            patterns: [\n                                {\n                                    context: 'node_modules/@webcomponents/webcomponentsjs',\n                                    from: '**/*.js',\n                                    to: 'webcomponents'\n                                }\n                            ]\n                        })\n                    ],\n                    module: {\n                    rules: [\n                        {\n                            test: /.ts$/,\n                            use: 'ts-loader',\n                            exclude: /node_modules/\n                        },\n                        {\n                            test: /.test.js$/,\n                            use: 'mocha-loader',\n                            exclude: /node_modules/\n                        },\n                        {\n                            test: /.test.ts$/,\n                            use: 'mocha-loader',\n                            exclude: /node_modules/\n                        },\n                        { \n                            enforce: 'pre',\n                            test: /.js$/,\n                            loader: 'source-map-loader'\n                        }\n                        ]\n                    },\n                    resolve: {\n                        extensions: ['.ts', '.js']\n                    },\n                    devtool: mode === 'development' ? 'source-map' : 'none',\n                    watchOptions: {\n                        ignored: /node_modules/\n                    },\n                    devServer: {\n                        contentBase: path.join(__dirname, '/dist'),\n                        compress: true,\n                        port: 9000,\n                        inline: true,\n                        hot: true //If this is false then liveReload implicitly true\n                    }\n                };\n            };\n        "}getDefaultUnitTestingBuffersTemplate(){return["\n            var context = require.context('../src', true, /.test.ts$/);\n            context.keys().forEach(context);\n            module.exports = context;\n            ","\n            const HtmlWebpackPlugin = require('html-webpack-plugin');\n            const { CleanWebpackPlugin } = require('clean-webpack-plugin');\n            const path = require('path');\n            \n            module.exports = ({ mode }) => {\n                return {\n                    mode,\n                    entry: path.resolve(__dirname, '.', 'all.tests.js'),\n                    output: {\n                        path: path.join(__dirname, '/build'),\n                        filename: '[name].bundle.js',\n                    },\n                    plugins: [\n                        new CleanWebpackPlugin(),\n                        new HtmlWebpackPlugin({\n                            template: path.resolve(__dirname, '.', 'test.html')\n                        })\n                    ],\n                    module: {\n                    rules: [\n                        {\n                            test: /.ts$/,\n                            use: 'ts-loader',\n                            exclude: /node_modules/\n                        },\n                        {\n                            test: /.test.js$/,\n                            use: 'mocha-loader',\n                            exclude: /node_modules/\n                        },\n                        {\n                            test: /.test.ts$/,\n                            use: [ 'mocha-loader', 'ts-loader' ],\n                            exclude: /node_modules/\n                        },\n                        { \n                            enforce: 'pre',\n                            test: /.js$/,\n                            loader: 'source-map-loader'\n                        }\n                        ]\n                    },\n                    resolve: {\n                        extensions: ['.ts', '.js']\n                    },\n                    devtool: mode === 'development' ? 'source-map' : 'none',\n                    watchOptions: {\n                        ignored: /node_modules/\n                    },\n                    devServer: {\n                        contentBase: path.join(__dirname, '/build'),\n                        compress: true,\n                        port: 9010,\n                        inline: true,\n                        //hot: true //If this is false then liveReload implicitly true\n                    },\n                    optimization: {\n                        minimize: mode === 'production' ? true : false,\n                    }\n                };\n            };\n            ",'\n            <!DOCTYPE html>\n\n            <html lang="en">\n             \n            <head>\n                <meta charset="UTF-8">\n                <meta name="viewport" content="width=device-width, initial-scale=1.0">\n                <meta http-equiv="X-UA-Compatible" content="ie=edge">\n                <title>Mocha Testing</title>\n            </head>\n             \n            <body>\n            </body>\n            </html>\n            ',"\n            var webpackConf = require('./webpack-test.config');\n\n            module.exports = function (config) {\n                return config.set({\n                    browsers: ['Chrome'],\n                    frameworks: ['mocha'],\n                    files: ['./index.ts'],\n                    preprocessors: {\n                        './index.ts': ['webpack']\n                    },\n                    plugins: [\n                        'karma-chrome-launcher',\n                        'karma-mocha',\n                        'karma-webpack'\n                    ],\n                    webpack: webpackConf,\n                    webpackMiddleware: {\n                        noInfo: true\n                    }\n                })\n            }\n            "]}}},function(e,n){e.exports=require("https")}]);